plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'animal'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'

	// mapper
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// s3
	implementation "software.amazon.awssdk:s3:2.25.26"

	// cloudFront
	implementation "com.amazonaws:aws-java-sdk-cloudfront:1.12.767"

	//query dsl
	implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
	implementation "com.querydsl:querydsl-sql:5.1.0"
	annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")
	annotationProcessor("jakarta.persistence:jakarta.persistence-api:3.1.0")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api:2.1.1")

}

// QueryDSL 설정
def generated = 'src/main/generated'

// Q 클래스 생성 작업
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// Q 클래스 생성 디렉토리 생성
sourceSets {
	main.java.srcDirs += [generated]
}

// Q 클래스 정리 작업
clean {
	delete file(generated)
}

tasks.named('test') {
	useJUnitPlatform()
}
